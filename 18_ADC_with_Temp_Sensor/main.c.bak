#include "stm32f4xx.h"
#include <stdio.h>

/*Tested with ARM Compiler : version 5*/



void USART2_init (void);
int USART2_write (int ch);


int data;
double voltage;
double celsius;

int main (void) {

    
    RCC->AHB1ENR |=  1;	           
    
    RCC->APB1ENR |= 1;             
    TIM2->PSC = 1600 - 1;           
    TIM2->ARR = 10000 - 1;        
    TIM2->CNT = 0;
    TIM2->CCMR1 = 0x6800;       
    TIM2->CCER = 0x0010;          
    TIM2->CCR2 = 50 - 1;
    TIM2->CR1 = 1;                
    

    RCC->APB2ENR |= 0x100;    
    ADC->CCR |= 0x800000;
    ADC->CCR &= ~0x400000;          // VBATE must be disabled for temp sensor

    ADC1->SMPR1 = 0x4000000;        // sampling time minimum 10 us
    ADC1->SQR3 = 18;               
    ADC1->CR2 = 0x13000000;         
    ADC1->CR2 |= 1;                
    
     while(1) {
        while(!(ADC1->SR & 2)) {}
        data = ADC1->DR;
   
        voltage = (double)data / 4095 * 3.3;   /* convert ADC output to voltage */
        celsius = (voltage - 0.76) / 0.0025 + 25; /* convert voltage to temperature C */
        printf("%d, %.2f\370C\r\n", data, celsius);    /* octal 370 is degree sign in extended ASCII */
    }
}


void USART2_init (void) {

    RCC->APB1ENR  |= 0x20000;    
    RCC->AHB1ENR  |= 1;          
    GPIOA->AFR[0]  =  0x0700;   
    GPIOA->MODER  |=  0x0020;  

    USART2->BRR = 0x0683;       // 9600 baud @ 16 MHz */
    USART2->CR1 = 0x0008;       // Enable Tx
    USART2->CR1 |= 0x2000;      
}

struct __FILE { int handle; };
FILE __stdout = {1};

int fputc(int c, FILE *f) {
    return USART2_write(c);  
}

int USART2_write (int ch) {
    while (!(USART2->SR & 0x0080)) {}   
    USART2->DR = ch;
    return ch;
}